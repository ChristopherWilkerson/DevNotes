## Website Repositories & Command Line
#### June 10th, 2024 

domain names are referred to as web addresses; google.com codecademy.com etc.

---> Command Line:

  files organized into a tree structure. directories are file folders.
root is first directory

ls = When you type ls, the command line looks at the directory you are in,
and then “lists” all the files and directories inside of it. 

pwd = print working directory. Shows what directory you're currently operating from.

cd = change directories "cd 2015" then use pwd to check

.. = navigate up one branch on the file tree.

cd // = use / to navigate through folders in one line i.e. 2015/jan/memory 

cd ../ = to navigate up the file tree in one line i.e. cd ../../..

mkdir = make directory "make folder"

touch = create new file 

press tab to auto finish commands

up and down arrow to cycle through old commands

"clear" will clear txt from view but not delete commands made.

using "ls" more specifically

ls 
    -a - lists all contents, including hidden files and directories
    -l - (a lowercase “L”) lists all contents of a directory in long format, as well as the file permissions
    -t - orders files and directories by the time they were last modified.

-l 
    
    1. Access rights. These indicate the read, write, and execute permissions on the file or directory allowed to the owner, the group, and all users. You can read more about file permissions.
    2. Number of hard links. This represents the number of hard links to the file or directory. This number includes the parent directory link (..) and current directory link (.).
    3. The username of the file’s owner. Here the username is cc.
    4. The name of the group that owns the file. Here the group name is eng.
    5. The size of the file in bytes.
    6. The date & time that the file was last modified.
    7. The name of the file or directory.

cat = The cat command outputs the contents of a specified file.

cp = copy file 

cp terminator.txt terminator.bak (create back up copy file in same directory)
cp source.txt directory (copy file to new directory)
cp the-office.txt slapstick/the-office-us.txt (copy file to new directory AND rename it)

cp file1.txt file2.txt my_directory/  (copies multiple files to new directory)

* = grab all files from directory or location
    cp * my_directory/
* .txt = grab all text files from directory or location.
cp w*.txt my_directory/ (grabs all txt that start with w)

mv = move files but doesn't copy them. (mv my_file.txt my_directory/) or multiples (mv my_file_1.txt my_file_2.txt my_directory/)

or use mv to rename a file in same directory (mv file_original.txt file_renamed.txt)

rm = delete from current directory

The -r (recursive) option is used to delete a directory and all of its child directories. (rm -r unwanted_directory)

REDIRECTION IN COMMAND

$ echo "hello"
hello
$ echo "Hello World" > hello.txt
$ cat hello.txt
Hello World
$ 
> takes the standard output of the command on the left, and redirects it to the file on the right. 
Here the standard output of cat deserts.txt is redirected to hello.txt.
BUT OVERWRITES THE CONTENT

$ cat forests.txt >> hello.txt

>> takes the standard output of the command on the left and appends (adds) it to the file on the right. 
ADDS THE CONTENT TO EXISTING

| is a “pipe.” The | takes the standard output of the command on the left, and pipes it as standard input to the command on the right. You can think of this as “command to command” redirection.

To count the words in volcanoes.txt using the word count command wc:

$ cat volcanoes.txt | wc  

$ cat volcanoes.txt | wc | cat > count.txt 

Multiple |s can be chained together. Above the standard output of cat volcanoes.txt is “piped” to the wc command. The standard output of wc is then “piped” to cat. Finally, the standard output of cat is redirected to count.txt.

$ sort continents.txt 

sort takes the standard input and orders it alphabetically for the standard output (it doesn’t change the file itself).

$ sort lakes.txt > sorted-lakes.txt (sort list and output to txt file)

grep = stands for “global regular expression print.” It searches files for lines that match a pattern and then returns the results. It is also case sensitive.
    grep -i enables the command to be case insensitive.

grep -R searches all files in a directory and outputs filenames and lines containing matched results. -R stands for “recursive”.

sed  =  stands for “stream editor.” It accepts standard input and modifies it based on an expression, before displaying it as output data. It is similar to “find and replace.”

sed 's/snow/rain/g' forests.txt 

The above command uses the g expression, meaning “global.” Here sed searches forests.txt for the word “snow” and replaces it with “rain” globally. This means all instances of “snow” on a line will be turned to “rain.”

sed as we’ve used it will only rewrite the command line output and the actual file won’t be changed. In order to rewrite the actual file, we need to use -i at the beginning of the command:

sed -i 's/snow/rain/g' forests.txt  (will find and replace all snows with rain in file "forests")

The alias command allows you to create keyboard shortcuts, or aliases, for commonly used commands.

alias pd="pwd" = creates the alias pd for the pwd command, which is then saved in the bash profile.



## June 11th, 2024

Git 

git init (start git function)

git add (add to staging area for tracking)

git status (checks status of file)

git diff filename (displays new version's added code [where filename is the file's name]

git commit -m "   "   (git commit commits the file to permanent residency on the server, and -m allows for a message to be 
  added in quotations.

git log (a log of the commits)










