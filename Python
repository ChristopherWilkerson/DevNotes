## Python Notes
#### June 10th, 2024

4 min


## August 27th, 2024 ##

zip function for lists is awesome.

brand = ['prada', 'kith', 'aimeDeLeon', 'stussy']
price = [1200, 400, 300, 500]

brand_price = zip(brand, price)
brand_price_list = list(brand_price)
print(brand_price_list)

= [('prada', 1200), ('kith', 400), ('aimeDeLeon', 300), ('stussy', 500)]


returns a set of tuples in a list.

Tuple is like a list but immutable. looks like (1, 2, 3, 4) 
Can have a Tuple with one item but has to have comma after item i.e (1,)


Clean code for for loops :)

brand = ['prada', 'kith', 'aimeDeLeon', 'stussy']
price = [1200, 400, 300, 500]
doubled = [num * 2 for num in price]
length = len(brand)
index = 0
brand_price = zip(brand, price)
brand_price_list = list(brand_price)
print(brand_price_list)

print(doubled)


numbers = [2, -1, 79, 33, -45]
negative_doubled = [num * 2 for num in numbers if num < 0]
print(negative_doubled)



numbers = [2, -1, 79, 33, -45]
doubled = [num * 2 if num < 0 else num * 3 for num in numbers ]
print(doubled)


NOTE: This is a bit different than our previous comprehension since the conditional if num < 0 else num * 3 comes after the expression num * 2 but before our for keyword. The placement of the conditional expression within the comprehension is dependent on whether or not an else clause is used. When an if statement is used without else, the conditional must go after for <element> in <collection>. If the conditional expression includes an else clause, the conditional must go before for. Attempting to write the expressions in any other order will result in a SyntaxError.



functions 

def directions_to_timesSq():
  print("Walk 4 mins to 34th St Herald Square train station")
  print("Take the Northbound N, Q, R, or W train 1 stop")
  print("Get off the Times Square 42nd Street stop")
