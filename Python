## Python Notes
#### June 10th, 2024

4 mins
3 mins


## August 27th, 2024 ##

zip function for lists is awesome.

brand = ['prada', 'kith', 'aimeDeLeon', 'stussy']
price = [1200, 400, 300, 500]

brand_price = zip(brand, price)
brand_price_list = list(brand_price)
print(brand_price_list)

= [('prada', 1200), ('kith', 400), ('aimeDeLeon', 300), ('stussy', 500)]


returns a set of tuples in a list.

Tuple is like a list but immutable. looks like (1, 2, 3, 4) 
Can have a Tuple with one item but has to have comma after item i.e (1,)


Clean code for for loops :)

brand = ['prada', 'kith', 'aimeDeLeon', 'stussy']
price = [1200, 400, 300, 500]
doubled = [num * 2 for num in price]
length = len(brand)
index = 0
brand_price = zip(brand, price)
brand_price_list = list(brand_price)
print(brand_price_list)

print(doubled)


numbers = [2, -1, 79, 33, -45]
negative_doubled = [num * 2 for num in numbers if num < 0]
print(negative_doubled)



numbers = [2, -1, 79, 33, -45]
doubled = [num * 2 if num < 0 else num * 3 for num in numbers ]
print(doubled)


NOTE: This is a bit different than our previous comprehension since the conditional if num < 0 else num * 3 comes after the expression num * 2 but before our for keyword. The placement of the conditional expression within the comprehension is dependent on whether or not an else clause is used. When an if statement is used without else, the conditional must go after for <element> in <collection>. If the conditional expression includes an else clause, the conditional must go before for. Attempting to write the expressions in any other order will result in a SyntaxError.



functions 

def directions_to_timesSq():
  print("Walk 4 mins to 34th St Herald Square train station")
  print("Take the Northbound N, Q, R, or W train 1 stop")
  print("Get off the Times Square 42nd Street stop")



## Set up virtual environment ## 

allows you to create a coding world that maintains whatever dependencies you create it with 

ChristophersMBP:vancouver_coding_career ChristopherWilkerson$ cd pythonprojects
ChristophersMBP:pythonprojects ChristopherWilkerson$ ls
ChristophersMBP:pythonprojects ChristopherWilkerson$ mkdir backendOne
ChristophersMBP:pythonprojects ChristopherWilkerson$ ls
backendOne
ChristophersMBP:pythonprojects ChristopherWilkerson$ cd backendOne
ChristophersMBP:backendOne ChristopherWilkerson$ python3 -m venv .venv
ChristophersMBP:backendOne ChristopherWilkerson$ ls
ChristophersMBP:backendOne ChristopherWilkerson$ ls
ChristophersMBP:backendOne ChristopherWilkerson$ cd ../
ChristophersMBP:pythonprojects ChristopherWilkerson$ ls
backendOne
ChristophersMBP:pythonprojects ChristopherWilkerson$ cd backendOne
ChristophersMBP:backendOne ChristopherWilkerson$ ls .venv
bin		include		lib		pyvenv.cfg
ChristophersMBP:backendOne ChristopherWilkerson$ ls -a
.	..	.venv
ChristophersMBP:backendOne ChristopherWilkerson$ . .venv/bin/activate
(.venv) ChristophersMBP:backendOne ChristopherWilkerson$ 



pip freeze will list all your current intalled dependencies in your virtual environment

then use pip freeze > requirements.txt 

  to redirect them and save to a txt file.

to use this file 

pip install -r requirements.txt


Introduction to Strings
Cut Me a Slice of String
6 min

Not only can we select a single character from a string, but we can also select entire chunks of characters from a string. We can do this with the following syntax:

string[first_index:last_index]

This is called slicing a string. When we slice a string we are creating a substring - a brand new string that starts at (and includes) the first_index and ends at (but excludes) the last_index.

Let’s look at some examples of this. Recall our favorite fruit:

favorite_fruit = "blueberry"

The indices of this string are shown in the diagram below.

Blueberry String

Let’s say we wanted a new string that contains the letters be. We could slice favorite_fruit as follows:

print(favorite_fruit[4:6])
# Output: be

Notice how the character at the first index, b, is included, but the character at the last index, r, is excluded. If you look for the indices 4 and 6 in the diagram, you can see how the r is outside that range.

We can also have open-ended selections. If we remove the first index, the slice starts at the beginning of the string and if we remove the second index the slice continues to the end of the string.

print(favorite_fruit[:4])
# Output: blue

print (favorite_fruit[4:])
# Output: berry

Again, notice how the b from berry is excluded from the first example and included in the second example.


Strings are immutable in Python.
