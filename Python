## Python Notes
#### June 10th, 2024

4 mins
3 mins
2 


## August 27th, 2024 ##

zip function for lists is awesome.

brand = ['prada', 'kith', 'aimeDeLeon', 'stussy']
price = [1200, 400, 300, 500]

brand_price = zip(brand, price)
brand_price_list = list(brand_price)
print(brand_price_list)

= [('prada', 1200), ('kith', 400), ('aimeDeLeon', 300), ('stussy', 500)]


returns a set of tuples in a list.

Tuple is like a list but immutable. looks like (1, 2, 3, 4) 
Can have a Tuple with one item but has to have comma after item i.e (1,)


Clean code for for loops :)

brand = ['prada', 'kith', 'aimeDeLeon', 'stussy']
price = [1200, 400, 300, 500]
doubled = [num * 2 for num in price]
length = len(brand)
index = 0
brand_price = zip(brand, price)
brand_price_list = list(brand_price)
print(brand_price_list)

print(doubled)


numbers = [2, -1, 79, 33, -45]
negative_doubled = [num * 2 for num in numbers if num < 0]
print(negative_doubled)



numbers = [2, -1, 79, 33, -45]
doubled = [num * 2 if num < 0 else num * 3 for num in numbers ]
print(doubled)


NOTE: This is a bit different than our previous comprehension since the conditional if num < 0 else num * 3 comes after the expression num * 2 but before our for keyword. The placement of the conditional expression within the comprehension is dependent on whether or not an else clause is used. When an if statement is used without else, the conditional must go after for <element> in <collection>. If the conditional expression includes an else clause, the conditional must go before for. Attempting to write the expressions in any other order will result in a SyntaxError.



functions 

def directions_to_timesSq():
  print("Walk 4 mins to 34th St Herald Square train station")
  print("Take the Northbound N, Q, R, or W train 1 stop")
  print("Get off the Times Square 42nd Street stop")



## Set up virtual environment ## 

allows you to create a coding world that maintains whatever dependencies you create it with 

ChristophersMBP:vancouver_coding_career ChristopherWilkerson$ cd pythonprojects
ChristophersMBP:pythonprojects ChristopherWilkerson$ ls
ChristophersMBP:pythonprojects ChristopherWilkerson$ mkdir backendOne
ChristophersMBP:pythonprojects ChristopherWilkerson$ ls
backendOne
ChristophersMBP:pythonprojects ChristopherWilkerson$ cd backendOne
ChristophersMBP:backendOne ChristopherWilkerson$ python3 -m venv .venv
ChristophersMBP:backendOne ChristopherWilkerson$ ls
ChristophersMBP:backendOne ChristopherWilkerson$ ls
ChristophersMBP:backendOne ChristopherWilkerson$ cd ../
ChristophersMBP:pythonprojects ChristopherWilkerson$ ls
backendOne
ChristophersMBP:pythonprojects ChristopherWilkerson$ cd backendOne
ChristophersMBP:backendOne ChristopherWilkerson$ ls .venv
bin		include		lib		pyvenv.cfg
ChristophersMBP:backendOne ChristopherWilkerson$ ls -a
.	..	.venv
ChristophersMBP:backendOne ChristopherWilkerson$ . .venv/bin/activate
(.venv) ChristophersMBP:backendOne ChristopherWilkerson$ 



pip freeze will list all your current intalled dependencies in your virtual environment

then use pip freeze > requirements.txt 

  to redirect them and save to a txt file.

to use this file 

pip install -r requirements.txt


Introduction to Strings
Cut Me a Slice of String
6 min

Not only can we select a single character from a string, but we can also select entire chunks of characters from a string. We can do this with the following syntax:

string[first_index:last_index]

This is called slicing a string. When we slice a string we are creating a substring - a brand new string that starts at (and includes) the first_index and ends at (but excludes) the last_index.

Let’s look at some examples of this. Recall our favorite fruit:

favorite_fruit = "blueberry"

The indices of this string are shown in the diagram below.

Blueberry String

Let’s say we wanted a new string that contains the letters be. We could slice favorite_fruit as follows:

print(favorite_fruit[4:6])
# Output: be

Notice how the character at the first index, b, is included, but the character at the last index, r, is excluded. If you look for the indices 4 and 6 in the diagram, you can see how the r is outside that range.

We can also have open-ended selections. If we remove the first index, the slice starts at the beginning of the string and if we remove the second index the slice continues to the end of the string.

print(favorite_fruit[:4])
# Output: blue

print (favorite_fruit[4:])
# Output: berry

Again, notice how the b from berry is excluded from the first example and included in the second example.


Strings are immutable in Python.

Introduction to Strings
Strings and Conditionals (Part Two)
16 min

There’s an even easier way than iterating through the entire string to determine if a character is in a string. We can do this type of check more efficiently using in. in checks if one string is part of another string.

Here is what the syntax of in looks like:

letter in word

Here, letter in word is a boolean expression that is True if the string letter is in the string word. Here are some examples:

print("e" in "blueberry")
# => True
print("a" in "blueberry")
# => False

In fact, this method is more powerful than the function you wrote in the last exercise because it not only works with letters, but with entire strings as well.

print("blue" in "blueberry")
# => True
print("blue" in "strawberry")
# => False

It can be helpful to include more than one boolean expression in the same line of code. To do this, use and or and not in between the boolean expressions.

print("e" in "blueberry" and "e" in "carrot")
# => False
print("e" in "blueberry" and not "e" in "carrot")
# => True

The first example above is False because ONE of the expressions was False; there is no “e” in “carrot”. The second example is True because there is an “e” in “blueberry” and not an “e” in “carrot”; both expressions are True.


String Methods
Splitting Strings
3 min

.upper(), .lower(), and .title() all are performed on an existing string and produce a string in return. Let’s take a look at a string method that returns a different object entirely!

.split() is performed on a string, takes one argument, and returns a list of substrings found between the given argument (which in the case of .split() is known as the delimiter). The following syntax should be used:

string_name.split(delimiter)

If you do not provide an argument for .split() it will default to splitting at spaces.

For example, consider the following strings:

man_its_a_hot_one = "Like seven inches from the midday sun"
print(man_its_a_hot_one.split())
# => ['Like', 'seven', 'inches', 'from', 'the', 'midday', 'sun']

.split() returned a list with each word in the string. Important to note: if we run .split() on a string with no spaces, we will get a single element array containing the same string.

String Methods
Joining Strings II
5 min

In the last exercise, we joined together a list of words using a space as the delimiter to create a sentence. In fact, you can use any string as a delimiter to join together a list of strings. For example, if we have the list

santana_songs = ['Oye Como Va', 'Smooth', 'Black Magic Woman', 'Samba Pa Ti', 'Maria Maria']

We could join this list together with ANY string. One often used string is a comma , because then we can create a string of comma-separated values, or CSV.

santana_songs_csv = ','.join(santana_songs)
print(santana_songs_csv)
# => 'Oye Como Va,Smooth,Black Magic Woman,Samba Pa Ti,Maria Maria'

You’ll often find data stored in CSVs because it is an efficient, simple file type used by popular programs like Excel or Google Spreadsheets.

You can also join using escape sequences as the delimiter. Consider the following example:

smooth_fifth_verse_lines = ['Well I\'m from the barrio', 'You hear my rhythm on your radio', 'You feel the turning of the world so soft and slow', 'Turning you \'round and \'round']

smooth_fifth_verse = '\n'.join(smooth_fifth_verse_lines)

print(smooth_fifth_verse)

This code is taking the list of strings and joining them using a newline \n as the delimiter. Then it prints the result and produces the output:

Well I'm from the barrio
You hear my rhythm on your radio
You feel the turning of the world so soft and slow
Turning you 'round and 'round


The next string method we will cover is .replace(). Replace takes two arguments and replaces all instances of the first argument in a string with the second argument. The syntax is as follows

string_name.replace(substring_being_replaced, new_substring)

Great! Let’s put it in context and look at an example.

with_spaces = "You got the kind of loving that can be so smooth"
with_underscores = with_spaces.replace(' ', '_')
print(with_underscores)
# 'You_got_the_kind_of_loving_that_can_be_so_smooth'

Here we used .replace() to change every instance of a space in the string above to be an underscore instead.

Note that in this example, we used a single character, but these substrings can be multiple characters long!


String Methods
.format()
9 min

Python also provides a handy string method for including variables in strings. This method is .format(). .format() takes variables as an argument and includes them in the string that it is run on. You include {} marks as placeholders for where those variables will be imported.

Consider the following function:

def favorite_song_statement(song, artist):
  return "My favorite song is {} by {}.".format(song, artist)

The function favorite_song_statement takes two arguments, song and artist, then returns a string that includes both of the arguments and prints a sentence. Note: .format() can take as many arguments as there are {} in the string it is run on, which in this case is two.

Here’s an example of the function being run:

print(favorite_song_statement("Smooth", "Santana"))
# => "My favorite song is Smooth by Santana."

Now you may be asking yourself, I could have written this function using string concatenation instead of .format(), why is this method better? The answer is legibility and reusability. It is much easier to picture the end result .format() than it is to picture the end result of string concatenation and legibility is everything. You can also reuse the same base string with different variables, allowing you to cut down on unnecessary, hard to interpret code.



## Algorithms ## 

Reverse string input 


function reverse(string) {
    let container = []
    for (i = 0; i <= string.length; i++) {
        container.push(string[string.length - i])
        // console.log(string[string.length - i])
    }
    console.log(container.join(""));
}


reverse('this is your captain speaking')



Rand Array Generator 

function randArray(num) {
    let randCont = []
    for (i = 0; i < num; i++) {
        randCont.push(Math.floor(Math.random() * i));
    }
    return randCont
}


python reverse

def reverse(str):
    i = 0
    cart = []
    while i <= len(str) - 1:
        cart.append(str[(len(str) - 1 - i)])
        i += 1
    return(''.join(cart))

print(reverse('wow'))

def palindrome(string):
    if string == reverse(string):
        print(True)
    else:
        print(False)

palindrome('saippuakivikauppias')


pipenv --three

name in dictionary cannot be duplicate,
but value can be


## MAX CHARACTER ##

def max_char(string):
    i = 0
    count = []
    while i < len(string) - 1:
        numbers = string.count(string[i])
        count.append(numbers)
        high_char = max(count)
        high_number = count.index(high_char)
        high_letter = string[high_number]
        i += 1
    return high_letter


print(max_char('Thiisss'))



Delete a Key
11 min

Sometimes we want to get a key and remove it from the dictionary. Imagine we were running a raffle, and we have this dictionary mapping ticket numbers to prizes:

raffle = {223842: "Teddy Bear", 872921: "Concert Tickets", 320291: "Gift Basket", 412123: "Necklace", 298787: "Pasta Maker"}

When we get a ticket number, we want to return the prize and also remove that pair from the dictionary, since the prize has been given away. We can use .pop() to do this. Just like with .get(), we can provide a default value to return if the key does not exist in the dictionary:

print(raffle.pop(320291, "No Prize"))
# Prints "Gift Basket"
print(raffle)
# Prints {223842: "Teddy Bear", 872921: "Concert Tickets", 412123: "Necklace", 298787: "Pasta Maker"}
print(raffle.pop(100000, "No Prize"))
# Prints "No Prize"
print(raffle)
# Prints {223842: "Teddy Bear", 872921: "Concert Tickets", 412123: "Necklace", 298787: "Pasta Maker"}
print(raffle.pop(872921, "No Prize"))
# Prints "Concert Tickets"
print(raffle)
# Prints {223842: "Teddy Bear", 412123: "Necklace", 298787: "Pasta Maker"}

.pop() works to delete items from a dictionary, when you know the key value.



Writing a File
5 min

Reading a file is all well and good, but what if we want to create a file of our own? With Python we can do just that. It turns out that our open() function that we’re using to open a file to read needs another argument to open a file to write to.

script.py

with open('generated_file.txt', 'w') as gen_file:
  gen_file.write("What an incredible file!")

Here we pass the argument 'w' to open() in order to indicate to open the file in write-mode. The default argument is 'r' and passing 'r' to open() opens the file in read-mode as we’ve been doing.

This code creates a new file in the same folder as script.py and gives it the text What an incredible file!. It’s important to note that if there is already a file called generated_file.txt it will completely overwrite that file, erasing whatever its contents were before.


Introduction to Classes
Attribute Functions
13 min

Instance variables and class variables are both accessed similarly in Python. This is no mistake, they are both considered attributes of an object. If we attempt to access an attribute that is neither a class variable nor an instance variable of the object Python will throw an AttributeError.

class NoCustomAttributes:
  pass

attributeless = NoCustomAttributes()

try:
  attributeless.fake_attribute
except AttributeError:
  print("This text gets printed!")

# prints "This text gets printed!"

What if we aren’t sure if an object has an attribute or not? hasattr() will return True if an object has a given attribute and False otherwise. If we want to get the actual value of the attribute, getattr() is a Python function that will return the value of a given object and attribute. In this function, we can also supply a third argument that will be the default if the object does not have the given attribute.

The syntax and parameters for these functions look like this:

hasattr(object, “attribute”) has two parameters:

    object : the object we are testing to see if it has a certain attribute
    attribute : name of attribute we want to see if it exists

getattr(object, “attribute”, default) has three parameters (one of which is optional):

    object : the object whose attribute we want to evaluate
    attribute : name of attribute we want to evaluate
    default : the value that is returned if the attribute does not exist (note: this parameter is optional)

Calling those functions looks like this:

hasattr(attributeless, "fake_attribute")
# returns False

getattr(attributeless, "other_fake_attribute", 800)
# returns 800, the default value

Above, we checked if the attributeless object has the attribute .fake_attribute. Since it does not, hasattr() returned False. After that, we used getattr to attempt to retrieve .other_fake_attribute. Since .other_fake_attribute isn’t a real attribute on attributeless, our call to getattr() returned the supplied default value 800, instead of throwing an AttributeError.

Introduction to Classes
String Representation
7 min

One of the first things we learn as programmers is how to print out information that we need for debugging. Unfortunately, when we print out an object we get a default representation that seems fairly useless.

class Employee():
  def __init__(self, name):
    self.name = name

argus = Employee("Argus Filch")
print(argus)
# prints "<__main__.Employee object at 0x104e88390>"

This default string representation gives us some information, like where the class is defined and our computer’s memory address where this object is stored, but is usually not useful information to have when we are trying to debug our code.

We learned about the dunder method __init__(). Now, we will learn another dunder method called __repr__(). This is a method we can use to tell Python what we want the string representation of the class to be. __repr__() can only have one parameter, self, and must return a string.

In our Employee class above, we have an instance variable called .name that should be unique enough to be useful when we’re printing out an instance of the Employee class.

class Employee():
  def __init__(self, name):
    self.name = name

  def __repr__(self):
    return self.name

argus = Employee("Argus Filch")
print(argus)
# prints "Argus Filch"

We implemented the __repr__() method and had it return the .name attribute of the object. When we printed the object out it simply printed the .name of the object! Cool!
